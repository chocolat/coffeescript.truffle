(root source.coffee
    (zone meta.inline.function.coffee
        (match
            (regex [(\([^()]*?\))\s*([=-]>)]
                (1 variable.parameter.function.coffee)
                (2 storage.type.function.coffee))))
    (zone meta.class.instance.constructor
        (match
            (regex [(new)\s+(\w+(?:\.\w*)*)]
                (1 keyword.operator.new.coffee)
                (2 entity.name.type.instance.coffee))))
    (zone string.quoted.heredoc.coffee
        (start
            (regex '''
                (0 punctuation.definition.string.begin.coffee)))
        (end
            (regex '''
                (0 punctuation.definition.string.end.coffee))))
    (zone string.quoted.double.heredoc.coffee
        (start
            (regex """
                (0 punctuation.definition.string.begin.coffee)))
        (end
            (regex """
                (0 punctuation.definition.string.end.coffee)))
        (subzones
            (zone constant.character.escape.coffee
                (match
                    (regex \\.)))
            (include @interpolated_coffee)))
    (zone string.quoted.script.coffee
        (start
            (regex [`]
                (0 punctuation.definition.string.begin.coffee)))
        (end
            (regex [`]
                (0 punctuation.definition.string.end.coffee)))
        (subzones
            (zone constant.character.escape.coffee
                (match
                    (regex [\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)])))))
    (zone comment.block.coffee
        (start
            (regex [(?<!#)###(?!#)]
                (0 punctuation.definition.comment.coffee)))
        (end
            (regex [###(?:[ \t]*\n)]
                (0 punctuation.definition.comment.coffee)))
        (subzones
            (zone storage.type.annotation.coffeescript
                (match
                    (regex @\w*)))))
    (zone comment.line.number-sign.coffee
        (match
            (regex [(#)(?!\{).*$\n?]
                (1 punctuation.definition.comment.coffee))))
    (zone string.regexp.coffee
        (start [/{3}])
        (end
            (regex [/{3}[imgy]{0,4}]))
        (subzones
            (include @interpolated_coffee)
            (include @embedded_comment)))
    (zone string.regexp.coffee
        (match
            (regex [/(?![\s=/*+{}?]).*?[^\\]/[igmy]{0,4}(?![a-zA-Z0-9])])))
    (zone keyword.control.coffee
        (match
            (regex [(?x)
				\b(?<![\.\$])(
					break|by|catch|continue|else|finally|for|in|of|if|return|switch|
					then|throw|try|unless|when|while|until|loop|do|(?<=for)\s+own
				)(?!\s*:)\b
			])))
    (zone keyword.operator.coffee
        (match
            (regex [(?x)
				and=|or=|!|%|&|\^|\*|\/|(\-)?\-(?!>)|\+\+|\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|
				>>>=|<>|<|>|!|&&|\.\.(\.)?|\?|\||\|\||\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|
				\^=|\b(?<![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not)\b
			])))
    (zone variable.assignment.coffee
        (match
            (regex [([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)>)))]
                (4 punctuation.separator.key-value)
                (5 keyword.operator.coffee)
                (1 variable.assignment.coffee))))
    (zone meta.variable.assignment.destructured.coffee
        (start
            (regex [(?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])]
                (0 keyword.operator.coffee)))
        (end
            (regex `([\]\}]\s*[:=])`
                (0 keyword.operator.coffee)))
        (subzones
            (include @variable_name)
            (include @instance_variable)
            (include @single_quoted_string)
            (include @double_quoted_string)
            (include @numeric)))
    (zone meta.function.coffee
        (match
            (regex [(?x)
				(\s*)
				(?=[a-zA-Z\$_])
				(
					[a-zA-Z\$_](\w|\$|:|\.)*\s*
					(?=[:=](\s*\(.*\))?\s*([=-]>))
				)
			]
                (3 entity.name.function.coffee)
                (4 variable.parameter.function.coffee)
                (5 storage.type.function.coffee)
                (2 entity.name.function.coffee))))
    (zone storage.type.function.coffee
        (match
            (regex [[=-]>])))
    (zone constant.language.boolean.true.coffee
        (match
            (regex [\b(?<!\.)(true|on|yes)(?!\s*[:=])\b])))
    (zone constant.language.boolean.false.coffee
        (match
            (regex [\b(?<!\.)(false|off|no)(?!\s*[:=])\b])))
    (zone constant.language.null.coffee
        (match
            (regex [\b(?<!\.)null(?!\s*[:=])\b])))
    (zone variable.language.coffee
        (match
            (regex [\b(?<!\.)(super|this|extends)(?!\s*[:=])\b])))
    (zone meta.class.coffee
        (match
            (regex [(class\b)\s+(@?[a-zA-Z\$_][\w\.]*)?(?:\s+(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?]
                (3 keyword.control.inheritance.coffee)
                (4 entity.other.inherited-class.coffee)
                (1 storage.type.class.coffee)
                (2 entity.name.type.class.coffee))))
    (zone keyword.other.coffee
        (match
            (regex [\b(debugger|\\)\b])))
    (zone support.class.coffee
        (match
            (regex [(?x)\b(
				Array|ArrayBuffer|Blob|Boolean|Date|document|event|Function|
				Int(8|16|32|64)Array|Math|Map|Number|
				Object|Proxy|RegExp|Set|String|WeakMap|
				window|Uint(8|16|32|64)Array|XMLHttpRequest
			)\b])))
    (zone entity.name.type.object.coffee
        (match
            (list console)
            (boundary.both)))
    (zone support.function.console.coffee
        (match
            (regex [((?<=console\.)(debug|warn|info|log|error|time|timeEnd|assert))\b])))
    (zone support.function.coffee
        (match
            (regex [(?x)\b(
				decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require
			)\b])))
    (zone support.function.method.array.coffee
        (match
            (regex [(?x)((?<=\.)(
				apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|
				isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|
				reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|
				unshift|valueOf
			))\b])))
    (zone support.function.static.array.coffee
        (match
            (regex [(?x)((?<=Array\.)(
				isArray
			))\b])))
    (zone support.function.static.object.coffee
        (match
            (regex [(?x)((?<=Object\.)(
				create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|
				getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|
				isnt|keys|preventExtensions|seal
			))\b])))
    (zone support.function.static.math.coffee
        (match
            (regex [(?x)((?<=Math\.)(
				abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|
				hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|
				tan|tanh|trunc
			))\b])))
    (zone support.function.static.number.coffee
        (match
            (regex [(?x)((?<=Number\.)(
				is(Finite|Integer|NaN)|toInteger
			))\b])))
    (zone constant.language.coffee
        (match
            (list Infinity NaN undefined)
            (boundary.both)))
    (zone punctuation.terminator.statement.coffee
        (match
            (regex \;)))
    (zone meta.delimiter.object.comma.coffee
        (match
            (regex [,[ |\t]*])))
    (zone meta.delimiter.method.period.coffee
        (match
            (regex \.)))
    (zone meta.brace.curly.coffee
        (match
            (regex [\{|\}])))
    (zone meta.brace.round.coffee
        (match
            (regex [\(|\)])))
    (zone meta.brace.square.coffee
        (match
            (regex [\[|\]\s*])))
    (include @instance_variable)
    (include @single_quoted_string)
    (include @double_quoted_string)
    (include @numeric))

(collection instance_variable
    (zone variable.other.readwrite.instance.coffee
        (match
            (regex [(@)([a-zA-Z_\$]\w*)?]))))

(collection variable_name
    (zone variable.assignment.coffee
        (match
            (regex [([a-zA-Z\$_]\w*(\.\w+)*)]
                (1 variable.assignment.coffee)))))

(collection single_quoted_string
    (zone string.quoted.single.coffee
        (start
            (regex '
                (0 punctuation.definition.string.begin.coffee)))
        (end
            (regex '
                (0 punctuation.definition.string.end.coffee)))
        (subzones
            (zone constant.character.escape.coffee
                (match
                    (regex [\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)]))))))

(collection interpolated_coffee
    (zone source.coffee.embedded.source
        (start
            (regex [\#\{]
                (0 punctuation.section.embedded.coffee)))
        (end
            (regex [\}]
                (0 punctuation.section.embedded.coffee)))
        (subzones
            (include $self))))

(collection numeric
    (zone constant.numeric.coffee
        (match
            (regex [(?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b]))))

(collection double_quoted_string
    (zone string.quoted.double.coffee
        (start
            (regex "
                (0 punctuation.definition.string.begin.coffee)))
        (end
            (regex "
                (0 punctuation.definition.string.end.coffee)))
        (subzones
            (zone constant.character.escape.coffee
                (match
                    (regex [\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)])))
            (include @interpolated_coffee))))

(collection embedded_comment
    (zone comment.line.number-sign.coffee
        (match
            (regex [(?<!\\)(#).*$\n?]
                (1 punctuation.definition.comment.coffee)))))